module perform
  ( pp,
    pr,
    pc,
    rp,
    rr,
    rc,
    cp,
    cr,
    cc
  )


source Py from "mock.py"   ("pmock", "pslurp", "pnTimes", "len"     as plen)
source R from "mock.R"     ("rmock", "rslurp", "rnTimes", "length"  as rlen)
source Cpp from "mock.hpp" ("cmock", "cslurp", "cnTimes", "clength" as clen)

type Bytes = Str
type Filename = Str

type Py => Str = "str"
type Py => Int = "int"
type Py => Bytes = "bytearray"

type R => Bytes = "raw"
type R => Str = "character"
type R => Int = "integer"

type Cpp => Str = "std::string"
type Cpp => Int = "int"

-- read an entire text file into memory
cslurp :: Filename -> Bytes
pslurp :: Filename -> Bytes
rslurp :: Filename -> Bytes

-- apply a function multiple times to a value
cnTimes a :: Int -> (a -> a) -> a -> a
pnTimes a :: Int -> (a -> a) -> a -> a
rnTimes a :: Int -> (a -> a) -> a -> a

-- get the length of a string
clen :: Bytes -> Int
plen :: Bytes -> Int
rlen :: Bytes -> Int

-- split the string by newline and then put it back together
cmock :: Bytes -> Bytes
pmock :: Bytes -> Bytes
rmock :: Bytes -> Bytes

pc n = plen . pnTimes n cmock . pslurp
pp n = plen . pnTimes n pmock . pslurp
pr n = plen . pnTimes n rmock . pslurp

rc n = rlen . rnTimes n cmock . rslurp
rp n = rlen . rnTimes n pmock . rslurp
rr n = rlen . rnTimes n rmock . rslurp

cc n = clen . cnTimes n cmock . cslurp
cp n = clen . cnTimes n pmock . cslurp
cr n = clen . cnTimes n rmock . cslurp
