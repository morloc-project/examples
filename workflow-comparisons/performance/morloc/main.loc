module perform
  ( pp,
    pr,
    pc,
    rp,
    rr,
    rc,
    cp,
    cr,
    cc
  )


source Py from "mock.py"   ("pmock", "pslurp", "pnTimes", "plength" as plen)
source R from "mock.R"     ("rmock", "rslurp", "rnTimes", "rlength" as rlen)
source Cpp from "mock.hpp" ("cmock", "cslurp", "cnTimes", "clength" as clen)

type Py => Str = "str"
type Py => Int = "int"

type R => Str = "raw"
type R => Int = "integer"

type Cpp => Str = "std::string"
type Cpp => Int = "int"

-- read an entire text file into memory
cslurp :: Str -> Str
pslurp :: Str -> Str
rslurp :: Str -> Str

-- apply a function multiple times to a value
cnTimes a :: Int -> (a -> a) -> a -> a
pnTimes a :: Int -> (a -> a) -> a -> a
rnTimes a :: Int -> (a -> a) -> a -> a

-- get the length of a string
clen :: Str -> Int
plen :: Str -> Int
rlen :: Str -> Int

-- split the string by newline and then put it back together
cmock :: Str -> Str
pmock :: Str -> Str
rmock :: Str -> Str

pc n = plen . pnTimes n cmock . pslurp
pp n = plen . pnTimes n pmock . pslurp
pr n = plen . pnTimes n rmock . pslurp

rc n = rlen . rnTimes n cmock . rslurp
rp n = rlen . rnTimes n pmock . rslurp
rr n = rlen . rnTimes n rmock . rslurp

cc n = clen . cnTimes n cmock . cslurp
cp n = clen . cnTimes n pmock . cslurp
cr n = clen . cnTimes n rmock . cslurp
